type Question {
    """Id unique de la question"""
    id_quest : ID!
    """Intitulé de la question"""
	intitule : String
    """Vrai si la question est à choix unique, faux sinon"""
	choixUnique : Boolean
    """Liste de la (des) bonne(s) réponse(s) à la question"""
	reponsesBonnes : [String]
    """Liste de la (des) mauvaise(s) réponse(s) à la question"""
	reponsesFausses : [String]
    """Temps de réponse autorisé pour répondre à la question (en secondes)"""
	time : Int
    """Répertoire dans lequel est contenue la question"""
	repertoire : Repertoire
}

type Repertoire {
    """Id unique du répertoire"""
    id_rep : ID!
    """Nom du répertoire"""
    nom : String
    """Liste des différentes questions contenues dans le répertoire"""
    questions : [Question]
    """Enseignant à qui le répertoire appartient"""
    enseignant : Enseignant
}

type Enseignant {
    """Id unique de l'enseignant"""
    id_ens : ID!
    """Nom de l'enseignant"""
	nom : String
    """Adresse mail de l'enseignant"""
	mail : String
    """Mot de passe de l'enseignant"""
	motdepasse : String
    """Liste des différents répertoires de l'enseignant"""
	repertoires : [Repertoire]
}

type Historique {
    """Id unique de l'historique"""
    id_quest : ID!
    """Date de l'historique (jj/mm/aaaa + heure)"""
    date : String
}

type Etudiant {
    """Id unique de l'étudiant"""
    id_etud : ID!
    """Pseudo de l'étudiant"""
    pseudo : String
    """Salon dans lequel l'étudiant est connecté"""
    salon : Salon
    """Nombre total de bonnes réponses de l'étudiant"""
    bonnesReponses : Int
    """Nombre total de questions auxquelles l'étudiant a répondu"""
    questionsRepondues : Int
}

type Salon {
    """Id unique du salon"""
    id_salon : ID!
    """Code à saisir par les étudiants pour rejoindre le salon"""
    codeAcces : Int
    """Liste des questions à poser après la question courante"""
    questionsEnAttente : [Question]
    """Liste des question qui ont déjà été posées"""
    questionsPosees : [Question]
    """Question qui est en train d'être posée"""
    questionCourante : Question
    """Liste des étudiants ayant rejoint le salon"""
    etudiants : [Etudiant]
    """Enseignant qui a créé ce salon"""
    enseignant : Enseignant
}

type Error {
    message : String!
}

union EnseignantResult = Enseignant | Error
union QuestionResult = Question | Error
union RepertoireResult = Repertoire | Error
union HistoriqueResult = Historique | Error
union SalonResult = Salon | Error
union EtudiantResult = Etudiant | Error

type Query {
    """Renvoie la liste de tous les enseignants"""
    allEnseignants : [Enseignant]
    """Renvoie la liste de toutes les questions"""
    allQuestions : [Question]
    """Renvoie la liste de tous les répertoires"""
    allRepertoires : [Repertoire]
    """Renvoie la liste de tous les historiques"""
    allHistoriques : [Historique]
    """Renvoie la liste de tous les salons"""
    allSalons : [Salon]
    """Renvoie la liste de tous les étudiants"""
    allEtudiants : [Etudiant]
    """Renvoie le enseignant correspondant au nom spécifié"""
    getEnseignantById(id_ens: ID!) : EnseignantResult
    """Renvoie la question correspondant à l'intitulé spécifié"""
    getQuestionById(id_quest: ID!) : QuestionResult
    """Renvoie le répertoire correspondant au nom spécifié"""
    getRepertoireById(id_rep: ID!) : RepertoireResult
    """Renvoie l'historique correspondant à la date spécifiée"""
    getHistoriqueById(id_hist: ID!) : HistoriqueResult
    """Renvoie le salon correspondant au code d'accès spécifié"""
    getSalonById(id_salon: ID!) : SalonResult
    """Renvoie l'étudiant correspondant au pseudo spécifié"""
    getEtudiantById(id_etud: ID!) : EtudiantResult
}

type Mutation {
    #Créations
    """Crée un nouvel enseignant correspondant aux paramètres spécifiés"""
    createEnseignant(nom: String!, mail: String!, motdepasse: String!) : EnseignantResult
    """Crée une nouvelle question correspondant aux paramètres spécifiés"""
    createQuestion(intitule: String!, choixUnique: Boolean!, reponsesBonnes: [String]!, reponsesFausses: [String]!, time: Int!) : QuestionResult
    """Crée un nouveau répertoire correspondant aux paramètres spécifiés"""
    createRepertoire(nom: String!, id_ens: ID!) : RepertoireResult
    """Crée un nouvel historique correspondant aux paramètres spécifiés"""
    createHistorique(id_quest: ID!, date: String!) : HistoriqueResult
    """Crée un nouveau salon correspondant aux paramètres spécifiés"""
    createSalon(codeAcces: Int!, id_ens: ID!) : SalonResult
    """Crée un nouvel étudiant correspondant aux paramètres spécifiés"""
    createEtudiant(pseudo: String!, id_salon: ID!) : EtudiantResult


    #Modifications
    #   Enseignant
    """Modifie le nom d'un enseignant"""
    updateEnseignantNom(id_ens: ID!, nom: String!) : EnseignantResult
    """Modifie l'adresse mail d'un enseignant"""
    updateEnseignantMail(id_ens: ID!, mail: String!) : EnseignantResult
    """Modifie le mot de passe d'un enseignant"""
    updateEnseignantMotDePasse(id_ens: ID!, motdepasse: String!) : EnseignantResult
    """Ajoute un répertoire dans la liste des répertoires d'un enseignant"""
    ajouterRepertoireEnseignant(id_ens: ID!, id_rep: ID!) : EnseignantResult
    """Supprimer un répertoire de la liste des répertoires d'un enseignant"""
    supprimerRepertoireEnseignant(id_ens: ID!, id_rep: ID!) : EnseignantResult

    #   Question
    """Modifie l'intitule de la question"""
    updateQuestionIntitule(id_quest: ID!, intitule: String!) : QuestionResult
    """Modifie le type de la question (True: Choix unique, False: Choix multiple)"""
    updateQuestionChoixUnique(id_quest: ID!, choixUnique: Boolean!) : QuestionResult
    """Modifie la liste de la (des) bonne(s) réponse(s) à la question"""
    updateQuestionReponsesBonnes(id_quest: ID!, reponsesBonnes: [String]!) : QuestionResult
    """Modifie la liste de la (des) mauvaise(s) réponse(s) à la question"""
    updateQuestionReponsesFausses(id_quest: ID!, reponsesFausses: [String]!) : QuestionResult
    """Modifie le temps de réponse de la question"""
    updateQuestionTime(id_quest: ID!, time: Int) : QuestionResult
    """Modifie le répertoire contenant la question"""
    updateQuestionRepertoire(id_quest: ID!, id_rep: ID!) : QuestionResult

    #   Répertoire
    """Modifie le nom du répertoire"""
    updateRepertoireNom(id_rep: ID!, nom: String!) : RepertoireResult
    """Ajoute une question dans la liste des questions du répertoire"""
    ajouterQuestionRepertoire(id_rep: ID!, id_quest: ID!) : RepertoireResult
    """Supprime une question de la liste des questions du répertoire"""
    supprimerQuestionRepertoire(id_rep: ID!, id_quest: ID!) : RepertoireResult
    """Modifie l'enseignant à qui appartient ce répertoire"""
    updateRepertoireEnseignant(id_rep: ID!, id_ens: ID!) : RepertoireResult

    #   Historique
    """Modifie la question de l'historique"""
    updateHistoriqueQuestion(id_hist: ID!, id_quest: ID!) : HistoriqueResult
    """Modifie la date de l'historique"""
    updateHistoriqueDate(id_hist: ID!, date: String!) : HistoriqueResult

    #   Salon
    """Modifie le code d'accès au salon"""
    updateSalonCodeAcces(id_salon: ID!, codeAcces: Int!) : SalonResult
    """Modifie l'enseignant à qui appartient ce salon"""
    updateSalonEnseignant(id_salon: ID!, id_ens: ID!) : SalonResult
    """Ajoute une question dans la liste des questions à poser"""
    ajouterQuestionSalon(id_salon: ID!, id_quest: ID!) : SalonResult
    """Supprime une question de la liste des questions à poser"""
    supprimerQuestionSalon(id_salon: ID!, id_quest: ID!) : SalonResult
    """Ajoute un étudiant dans la liste des étudiants connectés à ce salon"""
    ajouterEtudiantSalon(id_salon: ID!, id_quest: ID!) : SalonResult
    """Supprime un étudiant de la liste des étudiants connectés à ce salon"""
    supprimerEtudiantSalon(id_salon: ID!, id_quest: ID!) : SalonResult

    #   Étudiant
    """Modifie le pseudo de l'étudiant"""
    updateEtudiantPseudo(id_etud: ID!, pseudo: String!) : EtudiantResult
    """Modifie l'id du salon dans lequel l'étudiant se trouve"""
    updateEtudiantSalon(id_etud: ID!, id_salon: ID!) : EtudiantResult
    """Incrémente le compteur de bonnes réponses de l'étudiant"""
    incrementerBonnesReponsesEtudiant(id_etud: ID!) : EtudiantResult
    """Incrémente le compteur de questions répondues de l'étudiant"""
    incrementerQuestionsReponduesEtudiant(id_etud: ID!) : EtudiantResult


    #Suppressions
    """Supprime l'enseignant correspondant à l'id spécifié"""
    removeEnseignant(id_ens: ID!) : EnseignantResult
    """Supprime la question correspondant à l'id spécifié"""
    removeQuestion(id_quest: ID!) : QuestionResult
    """Supprime le répertoire correspondant à l'id spécifié"""
    removeRepertoire(id_rep: ID!) : RepertoireResult
    """Supprime l'historique correspondant à l'id spécifié"""
    removeHistorique(id_hist: ID!) : HistoriqueResult
    """Supprime le salon correspondant à l'id spécifié"""
    removeSalon(id_salon: ID!) : SalonResult
    """Supprime l'étudiant correspondant à l'id spécifié"""
    removeEtudiant(id_etud: ID!) : EtudiantResult
}